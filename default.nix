<<<<<<< Updated upstream
{ nixpkgs ? import <nixpkgs> {} }:
with nixpkgs; let
  agdaDeps = with (import (builtins.fetchTarball
      https://github.com/nixos/nixpkgs/tarball/7e9b0dff974c89e070da1ad85713ff3c20b0ca97) {}); let

    agda-stdlib = agdaPackages.standard-library.overrideAttrs (oldAttrs: {
      version = "1.7";
      src =  fetchFromGitHub {
        repo = "agda-stdlib";
        owner = "input-output-hk";
        rev = "ce564c90f717da8346190ad0a792cfda548b16e6";
        sha256 = "zu1sJm5BxU9Nb5ZoLQipC/sqYQOlM0Rsl31tI56Uip8=";
      };
    });

    agda-finset = agdaPackages.mkDerivation {
      pname = "agda-finset";
      version = "0.9";
      src = fetchFromGitHub {
        repo = "agda-finset";
        owner = "input-output-hk";
        rev = "94fad4feefc945a76aa088bb10c9aa5964b56132";
        sha256 = "1jm9y5yp21wryv12zd104xn6czvwnzg44d23g8rwgfig46wz1w5x";
      };
      meta = {};
      libraryFile = "Finset.agda-lib";
      everythingFile = "src/README.agda";
      buildInputs = [ agda-stdlib ];
=======
{ nixpkgs ? <nixpkgs> }: with (import
      <nixpkgs>
      { system = "x86_64-darwin"; });
let
  agda-stdlib = agdaPackages.standard-library.overrideAttrs (oldAttrs: {
    version = "1.7";
    src =  fetchFromGitHub {
      repo = "agda-stdlib";
      owner = "input-output-hk";
      rev = "ce564c90f717da8346190ad0a792cfda548b16e6";
      sha256 = "zu1sJm5BxU9Nb5ZoLQipC/sqYQOlM0Rsl31tI56Uip8=";
>>>>>>> Stashed changes
    };

    deps = [ agda-stdlib agda-finset ];
  in {
    agda = agda.withPackages { pkgs = deps; ghc = nixpkgs.ghc; };
    ledger = agdaPackages.mkDerivation {
      pname = "Agda-ledger";
      version = "0.1";
      src = ./src;
      meta = {};
      buildInputs = deps;
      everythingFile = "Ledger.lagda";
      postInstall = "cp -r latex $out";
      extraExtensions = [ "hs" "cabal" ];
    };
  };
  agda-ledger = agdaDeps.ledger;
  agdaWithPkgs = agdaDeps.agda;

  ledger-hs-src = stdenv.mkDerivation {
    pname = "Agda-ledger-hs-src";
    version = "0.1";
    src = "${agda-ledger}";
    meta = {};
    buildInputs = [ agdaWithPkgs ];
    buildPhase = "";
    installPhase = ''
      mkdir -p $out
      agda -c --ghc-dont-call-ghc --compile-dir $out HSLedger.agda
      cp HSLedgerTest.hs $out
      cp agda-ledger-executable-spec.cabal $out

      # Append all the modules generated by MAlonzo to the cabal file
      find $out/MAlonzo -name "*.hs" -print | sed "s#^$out/#        #;s#\.hs##;s#/#.#g" >> $out/agda-ledger-executable-spec.cabal
    '';
  };
in {
  agda-ledger = agda-ledger;
  agda-ledger-executable-spec = haskellPackages.callCabal2nix "agda-ledger-executable-spec" "${ledger-hs-src}" {};

  ledger-docs = stdenv.mkDerivation {
    pname = "simple-utxo-ledger-docs";
    version = "0.1";
    src = "${agda-ledger}";
    meta = {};
    buildInputs = [ agdaWithPkgs (texlive.combine {
      inherit (texlive)
        scheme-small
        collection-latexextra
        collection-latexrecommended
        collection-mathscience
        bclogo
        latexmk;
    })];
    buildPhase = ''
      agda --latex Ledger.lagda
      cd latex && latexmk -xelatex Ledger.tex && cd ..
    '';
    installPhase = ''
      mkdir -p $out
      agda --html --html-dir $out/html Ledger.lagda
      cp latex/Ledger.pdf $out
    '';
  };
<<<<<<< Updated upstream
=======
in
agdaPackages.mkDerivation {
  pname = "simple-utxo-ledger";
  version = "0.1";
  src = ./.;
  meta = {};
  buildInputs = [ agda-stdlib agda-finset ];
  everythingFile = "Ledger.lagda";
  installPhase = ''
    mkdir -p $out
    agda --html --html-dir $out/html Ledger.lagda
    agda -c --compile-dir $out/ledger HSLedger.agda
  	agda --only-scope-checking --latex Ledger.lagda
  	cd latex && xelatex Ledger.tex
  	cp Ledger.pdf $out
  '';
>>>>>>> Stashed changes
}
